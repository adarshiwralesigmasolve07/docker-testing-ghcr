name: Build and Push and Deploy Docker Image

on:
  push:
    branches: [ main, master, develop, 'feature/*' ]
    tags:
      - 'v*.*.*'  # Push events to matching v*, i.e., v1.0.0, v20.15.10
  pull_request:
    branches: [ main, master, develop ]
  # Allow manual trigger
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  WEBHOOK_DEVELOP: https://cytaggsxt9.execute-api.us-east-1.amazonaws.com


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ai
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract feature branch name (if applicable)
        id: extract-feature
        if: ${{ startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          # Extract the part after 'feature/' and replace / with -
          BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's|feature/||' | sed 's|/|-|g')
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag with branch name if it's main or develop
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
            
            # Tag feature branches with feature-branchname
            type=raw,value=feature-${{ steps.extract-feature.outputs.name }},enable=${{ startsWith(github.ref, 'refs/heads/feature/') }}
            
            # Tag with git hash for all builds
            type=sha,format=short
            
            # Tag with PR number for PRs
            type=ref,event=pr
            
            # Apply semantic versioning tags when a version tag is pushed
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Get commit hash
        id: commit-hash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT_HASH=${{ steps.commit-hash.outputs.hash }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger ECS deployment
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          # Get all tags that were pushed
          ALL_TAGS=$(echo "${{ steps.meta.outputs.tags }}" | sed 's/.*://g')
          

          # Convert tags to JSON array format
          TAGS_JSON=$(echo "$ALL_TAGS" | jq -R -s -c 'split("\n") | map(select(length > 0))')

          # Create payload matching the Lambda's expected format
          PAYLOAD=$(cat <<EOF
          {
            "repository": {
              "full_name": "${{ github.repository }}"
            },
            "package": {
              "name": "${{ github.repository }}",
              "package_version": {
                "metadata": {
                  "container": {
                    "tags": ${TAGS_JSON}
                  }
                }
              }
            }
          }
          EOF
          )
          
          echo "Triggering deployment for repository: ${{ github.repository }}"
          echo "Tags: ${TAGS_JSON}"
          
          # Call Lambda function URL
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            ${{ env.WEBHOOK_DEVELOP }}
          
          echo ""
          echo "ðŸ“¤ Deployment webhook triggered successfully in Development account"